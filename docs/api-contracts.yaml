openapi: 3.0.0
info:
  title: Skill Harbour(Online Course Management System) API
  description: API contracts for Auth, User, Student, Instructor, Organization, Course, Module, Lesson, Enrollment, Review, Payment, and Admin services.
  version: 1.0.0
servers:
  - url: http://localhost:8080/api/v1
    description: Local development server
tags:
  - name: Auth
  - name: User
  - name: Student
  - name: Instructor
  - name: Organization
  - name: Course
  - name: Module
  - name: Lesson
  - name: Enrollment
  - name: Review
  - name: Payment
  - name: Admin

security:
  - bearerAuth: []

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

paths:

  # ------------------- AUTH -------------------
  /auth/register:
    post:
      tags: [Auth]
      summary: User registration
      description: Register as Student, Instructor, or Organization
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email: { type: string, example: john@example.com }
                password: { type: string, example: pass123 }
                role: { type: string, enum: [STUDENT, INSTRUCTOR, ORG_ADMIN] }
      responses:
        "201":
          description: User registered successfully

  /auth/login:
    post:
      tags: [Auth]
      summary: User login
      description: Login with credentials and get JWT
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email: { type: string, example: john@example.com }
                password: { type: string, example: pass123 }
      responses:
        "200":
          description: Login successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  token: { type: string }
                  role: { type: string }

  # ------------------- USER -------------------
  /users/{id}:
    get:
      tags: [User]
      summary: Get user profile
      parameters:
        - in: path
          name: id
          schema: { type: integer }
          required: true
      responses:
        "200":
          description: User profile

  # ------------------- STUDENT -------------------
  /students/{id}:
    get:
      tags: [Student]
      summary: Get student profile
      parameters:
        - in: path
          name: id
          schema: { type: integer }
          required: true
      responses:
        "200":
          description: Student profile

  /students/{id}/courses:
    get:
      tags: [Student]
      summary: Get student enrolled courses
      parameters:
        - in: path
          name: id
          schema: { type: integer }
          required: true
      responses:
        "200":
          description: List of enrolled courses

  # ------------------- INSTRUCTOR -------------------
  /instructors/{id}:
    get:
      tags: [Instructor]
      summary: Get instructor profile
      parameters:
        - in: path
          name: id
          schema: { type: integer }
          required: true
      responses:
        "200":
          description: Instructor profile

  /instructors/{id}/courses:
    get:
      tags: [Instructor]
      summary: Get courses created by instructor
      parameters:
        - in: path
          name: id
          schema: { type: integer }
          required: true
      responses:
        "200":
          description: List of courses

  # ------------------- ORGANIZATION -------------------
  /organizations/{id}:
    get:
      tags: [Organization]
      summary: Get organization profile
      parameters:
        - in: path
          name: id
          schema: { type: integer }
          required: true
      responses:
        "200":
          description: Organization profile

  /organizations/{id}/bulk-enroll:
    post:
      tags: [Organization]
      summary: Bulk enroll students
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                studentIds:
                  type: array
                  items: { type: integer }
      responses:
        "200":
          description: Students enrolled successfully

  # ------------------- COURSE -------------------
  /courses:
    post:
      tags: [Course]
      summary: Create a course
      security: [{ bearerAuth: [] }]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title: { type: string }
                description: { type: string }
                category: { type: string }
                level: { type: string }
                price: { type: number }
      responses:
        "201":
          description: Course created

    get:
      tags: [Course]
      summary: Get all published courses
      responses:
        "200":
          description: List of courses

  /courses/{id}:
    get:
      tags: [Course]
      summary: Get course details
      parameters:
        - in: path
          name: id
          schema: { type: integer }
          required: true
      responses:
        "200":
          description: Course details

    put:
      tags: [Course]
      summary: Update a course
      parameters:
        - in: path
          name: id
          schema: { type: integer }
          required: true
      responses:
        "200":
          description: Course updated

    delete:
      tags: [Course]
      summary: Delete a course
      parameters:
        - in: path
          name: id
          schema: { type: integer }
          required: true
      responses:
        "200":
          description: Course deleted

  # ------------------- MODULE -------------------
  /courses/{id}/modules:
    post:
      tags: [Module]
      summary: Add module to course
      parameters:
        - in: path
          name: id
          schema: { type: integer }
          required: true
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title: { type: string }
                description: { type: string }
                orderNo: { type: integer }
      responses:
        "201":
          description: Module created

  # ------------------- LESSON -------------------
  /modules/{id}/lessons:
    post:
      tags: [Lesson]
      summary: Add lesson to module
      parameters:
        - in: path
          name: id
          schema: { type: integer }
          required: true
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file: { type: string, format: binary }
                title: { type: string }
                duration: { type: string }
      responses:
        "201":
          description: Lesson uploaded (S3 URL saved)

  /lessons/{id}:
    get:
      tags: [Lesson]
      summary: Get lesson (returns pre-signed URL)
      parameters:
        - in: path
          name: id
          schema: { type: integer }
          required: true
      responses:
        "200":
          description: Lesson details with pre-signed URL

  # ------------------- ENROLLMENT -------------------
  /courses/{id}/enroll:
    post:
      tags: [Enrollment]
      summary: Enroll student to course
      responses:
        "201":
          description: Student enrolled

  # ------------------- REVIEW -------------------
  /courses/{id}/review:
    post:
      tags: [Review]
      summary: Add review for a course
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                rating: { type: integer }
                comment: { type: string }
      responses:
        "201":
          description: Review added

    get:
      tags: [Review]
      summary: Get reviews for a course
      responses:
        "200":
          description: List of reviews

  # ------------------- PAYMENT -------------------
  /courses/{id}/pay:
    post:
      tags: [Payment]
      summary: Make payment for course
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                payerType: { type: string, enum: [STUDENT, ORG] }
                amount: { type: number }
      responses:
        "200":
          description: Payment successful

  # ------------------- ADMIN -------------------
  /courses/{id}/approve:
    put:
      tags: [Admin]
      summary: Approve course
      responses:
        "200":
          description: Course approved

  /courses/{id}/reject:
    put:
      tags: [Admin]
      summary: Reject course
      responses:
        "200":
          description: Course rejected

  /users/{id}/block:
    put:
      tags: [Admin]
      summary: Block user
      responses:
        "200":
          description: User blocked
